generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  role          String?   @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime? @map("email_verified")

  actions Action[] @relation(name: "primary")
  targets Action[] @relation(name: "secondary")

  Chats   Chat[]
  Matches Match[]
  Message Message[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Action {
  id        String   @id @default(cuid())
  user      User     @relation(name: "primary", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  target    User     @relation(name: "secondary", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  type      String   @default("skip")
  createdAt DateTime @default(now())

  @@unique([userId, targetId])
  @@index([userId])
}

model Match {
  id        String   @id @default(cuid())
  users     User[]
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  createdAt DateTime @default(now())

  @@index([chatId])
}

model Chat {
  id          String    @id @default(cuid())
  name        String?
  description String?
  image       String?
  members     User[]
  messages    Message[]
  Match       Match[]
}

model Message {
  id        String   @id @default(cuid())
  content   String?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  createdAt DateTime @default(now())

  @@index([senderId])
  @@index([chatId])
}
